[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# CardArea:emplace() (X-Ray)
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = 'if #self.cards > self.config.card_limit then'
position = 'before'
match_indent = true
payload = '''

if G.jokers ~= nil and self == G.hand then

    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Xray' then
            v:calculate_joker({ emplaced_card = card })
        end
    end
end

'''

# Joker Knight variables
[[patches]]
[patches.pattern]
target = 'engine/node.lua'
pattern = 'function Node:drag()'
position = 'before'
match_indent = true
payload = '''

local break_table = {before = nil, after = nil}

'''

# Node:drag() (Joker Knight)
[[patches]]
[patches.pattern]
target = 'engine/node.lua'
pattern = 'function Node:drag()'
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Knight' and not v.debuff then
            if break_table.before == nil then

                break_table.before = {}

                for _, v in ipairs(G.jokers.cards) do
                    table.insert(break_table.before, v.ability.name)
                end

                break_table.after = break_table.before

            end
        end
    end
end

'''

# Node:stop_drag() (Joker Knight)
[[patches]]
[patches.pattern]
target = 'engine/node.lua'
pattern = 'function Node:stop_drag()'
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Knight' and not v.debuff then
            function do_tables_match(a, b)
                return table.concat(a) == table.concat(b)
            end

            if break_table.before ~= nil then

            break_table.before = {}

            for _, v in ipairs(G.jokers.cards) do
                table.insert(break_table.before, v.ability.name)
            end

            if not do_tables_match(break_table.before, break_table.after) then
                v:calculate_joker({ break_positions = true })
            end

                break_table.before = nil
                break_table.after = nil
            end
        end
    end
end

'''

# create_card() (JMJB)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'card:set_edition(edition)'
position = 'before'
match_indent = true
payload = '''

if card.ability.name == 'JMJB' then
    if card:get_edition() == nil then
        edition = poll_edition('aura', nil, true, true)
    end
end

'''

# ease_dollars() (Fiendish)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'function ease_dollars(mod, instant)'
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Fiendish' and not v.debuff then
            if mod > 0 then
                if pseudorandom('fiendish'..G.SEED) < G.GAME.probabilities.normal / v.ability.extra.odds then
                    mod = 1
                    card_eval_status_text(
                    v,
                    'extra',
                    nil, nil, nil,
                    {message = '$'..(mod or '1'), colour = G.C.RED, instant = true})
                else
                    mod = mod * 2
                    card_eval_status_text(
                    v,
                    'extra',
                    nil, nil, nil,
                    {message = '$'..mod, colour = G.C.ORANGE, instant = true})
                end
            end
        end
    end
end

'''

# create_card() (Doorhanger)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'local _pool, _pool_key = get_current_pool(_type, _rarity, legendary, key_append)'
position = 'before'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Doorhanger' and not v.debuff then
            if _rarity == nil or _rarity < 0.9 then

                _rarity = 0.9

                if pseudorandom('doorhanger'..G.SEED) > 0.98 then
                    _rarity = 1
                end
            end
        end
    end
end

'''

# evaluate_play (Nil Bill)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "card_eval_status_text(scoring_hand[i], 'debuff')"
position = 'after'
match_indent = true
payload = '''
if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Nil Bill' and not v.debuff then
            v:calculate_joker({debuffed_card = scoring_hand[i]})
        end
    end
end

'''